package com.vaadin.starter.bakery.backend.data.entity;

import java.io.Serializable;
import java.util.Objects;

import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.MappedSuperclass;
import jakarta.persistence.Version;

/**
 * Abstract base class for all entities in the bakery application.
 * Provides common functionality including ID generation and optimistic locking support.
 * 
 * <p>This class implements {@link Serializable} to support entity serialization
 * and uses JPA annotations for persistence mapping.</p>
 * 
 * <p>All entities extending this class will have:
 * <ul>
 *   <li>An auto-generated primary key (id)</li>
 *   <li>Optimistic locking support via version field</li>
 *   <li>Proper equals and hashCode implementations</li>
 * </ul>
 * </p>
 * 
 * @author Bakery Application
 * @version 1.0
 * @since 1.0
 */
@MappedSuperclass
public abstract class AbstractEntity implements Serializable {

	/**
	 * The unique identifier for this entity.
	 * This field is automatically generated by the persistence provider.
	 */
	@Id
	@GeneratedValue
	private Long id;

	/**
	 * Version field for optimistic locking.
	 * This field is automatically managed by JPA to prevent concurrent modification conflicts.
	 */
	@Version
	private int version;

	/**
	 * Returns the unique identifier of this entity.
	 * 
	 * @return the entity ID, or null if the entity has not been persisted yet
	 */
	public Long getId() {
		return id;
	}

	/**
	 * Returns the version number used for optimistic locking.
	 * 
	 * @return the current version number of this entity
	 */
	public int getVersion() {
		return version;
	}

	/**
	 * Returns a hash code value for this entity based on its ID and version.
	 * 
	 * @return a hash code value for this entity
	 */
	@Override
	public int hashCode() {
		return Objects.hash(id, version);
	}

	/**
	 * Indicates whether some other object is "equal to" this entity.
	 * Two entities are considered equal if they have the same class, ID, and version.
	 * 
	 * @param o the reference object with which to compare
	 * @return true if this entity is the same as the obj argument; false otherwise
	 */
	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		AbstractEntity that = (AbstractEntity) o;
		return version == that.version &&
				Objects.equals(id, that.id);
	}
}
